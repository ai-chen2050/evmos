// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hetu/checkpointing/v1/query.proto

package checkpointingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_RawCheckpointList_FullMethodName = "/hetu.checkpointing.v1.Query/RawCheckpointList"
	Query_RawCheckpoint_FullMethodName     = "/hetu.checkpointing.v1.Query/RawCheckpoint"
	Query_BlsPublicKeyList_FullMethodName  = "/hetu.checkpointing.v1.Query/BlsPublicKeyList"
	Query_EpochStatus_FullMethodName       = "/hetu.checkpointing.v1.Query/EpochStatus"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// RawCheckpointList queries all checkpoints that match the given status.
	RawCheckpointList(ctx context.Context, in *QueryRawCheckpointListRequest, opts ...grpc.CallOption) (*QueryRawCheckpointListResponse, error)
	// RawCheckpoint queries a checkpoints at a given epoch number.
	RawCheckpoint(ctx context.Context, in *QueryRawCheckpointRequest, opts ...grpc.CallOption) (*QueryRawCheckpointResponse, error)
	// BlsPublicKeyList queries a list of bls public keys of the validators at a
	// given epoch number.
	BlsPublicKeyList(ctx context.Context, in *QueryBlsPublicKeyListRequest, opts ...grpc.CallOption) (*QueryBlsPublicKeyListResponse, error)
	// EpochStatus queries the status of the checkpoint at a given epoch
	EpochStatus(ctx context.Context, in *QueryEpochStatusRequest, opts ...grpc.CallOption) (*QueryEpochStatusResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RawCheckpointList(ctx context.Context, in *QueryRawCheckpointListRequest, opts ...grpc.CallOption) (*QueryRawCheckpointListResponse, error) {
	out := new(QueryRawCheckpointListResponse)
	err := c.cc.Invoke(ctx, Query_RawCheckpointList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RawCheckpoint(ctx context.Context, in *QueryRawCheckpointRequest, opts ...grpc.CallOption) (*QueryRawCheckpointResponse, error) {
	out := new(QueryRawCheckpointResponse)
	err := c.cc.Invoke(ctx, Query_RawCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlsPublicKeyList(ctx context.Context, in *QueryBlsPublicKeyListRequest, opts ...grpc.CallOption) (*QueryBlsPublicKeyListResponse, error) {
	out := new(QueryBlsPublicKeyListResponse)
	err := c.cc.Invoke(ctx, Query_BlsPublicKeyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochStatus(ctx context.Context, in *QueryEpochStatusRequest, opts ...grpc.CallOption) (*QueryEpochStatusResponse, error) {
	out := new(QueryEpochStatusResponse)
	err := c.cc.Invoke(ctx, Query_EpochStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// RawCheckpointList queries all checkpoints that match the given status.
	RawCheckpointList(context.Context, *QueryRawCheckpointListRequest) (*QueryRawCheckpointListResponse, error)
	// RawCheckpoint queries a checkpoints at a given epoch number.
	RawCheckpoint(context.Context, *QueryRawCheckpointRequest) (*QueryRawCheckpointResponse, error)
	// BlsPublicKeyList queries a list of bls public keys of the validators at a
	// given epoch number.
	BlsPublicKeyList(context.Context, *QueryBlsPublicKeyListRequest) (*QueryBlsPublicKeyListResponse, error)
	// EpochStatus queries the status of the checkpoint at a given epoch
	EpochStatus(context.Context, *QueryEpochStatusRequest) (*QueryEpochStatusResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) RawCheckpointList(context.Context, *QueryRawCheckpointListRequest) (*QueryRawCheckpointListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawCheckpointList not implemented")
}
func (UnimplementedQueryServer) RawCheckpoint(context.Context, *QueryRawCheckpointRequest) (*QueryRawCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawCheckpoint not implemented")
}
func (UnimplementedQueryServer) BlsPublicKeyList(context.Context, *QueryBlsPublicKeyListRequest) (*QueryBlsPublicKeyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlsPublicKeyList not implemented")
}
func (UnimplementedQueryServer) EpochStatus(context.Context, *QueryEpochStatusRequest) (*QueryEpochStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochStatus not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_RawCheckpointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRawCheckpointListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RawCheckpointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RawCheckpointList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RawCheckpointList(ctx, req.(*QueryRawCheckpointListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RawCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRawCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RawCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RawCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RawCheckpoint(ctx, req.(*QueryRawCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlsPublicKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlsPublicKeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlsPublicKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BlsPublicKeyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlsPublicKeyList(ctx, req.(*QueryBlsPublicKeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochStatus(ctx, req.(*QueryEpochStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hetu.checkpointing.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawCheckpointList",
			Handler:    _Query_RawCheckpointList_Handler,
		},
		{
			MethodName: "RawCheckpoint",
			Handler:    _Query_RawCheckpoint_Handler,
		},
		{
			MethodName: "BlsPublicKeyList",
			Handler:    _Query_BlsPublicKeyList_Handler,
		},
		{
			MethodName: "EpochStatus",
			Handler:    _Query_EpochStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hetu/checkpointing/v1/query.proto",
}
